created: 20220925111953309
modified: 20221102120448836
tags: 
title: EditColourWidget (Examples)
type: text/vnd.tiddlywiki

\define resetPaletteActions()
<$action-createtiddler $basetitle="EditColourWidget (Palette)"
  $overwrite="yes"
	$timestamp="no"
	created="20221003082622427"
	modified="20221003082622697"
	type="application/x-tiddler-dictionary"
	text="""aaa: <<colour bbb>>
bbb: <<colour ccc>>
ccc: #a0a3e9"""
/>
\end

\define resetPalette()
<$button actions=<<resetPaletteActions>> class="tc-small-gap-left" >Reset</$button>
\end

! Example

The tiddler used is [[EditColourWidget (Palette)]] which looks like this: 

{{EditColourWidget (Palette)}}

!! Known Issue

* ''~WebKit'' based browsers like Chrome or Edge automatically close the colour popup if the color input is redrawn, so `liveUpdate` canot be used. 
** ~FireFox works fine

* ''~ToDo'': Check for browser-sniff plugin and auto-disable liveUpdate for chromium based browsers.

!! Try it

```
<$macrocall $name="colour-picker-resolved" palette="EditColourWidget (Palette)" colourName=aaa />
```

<$macrocall $name="colour-picker-resolved" palette="EditColourWidget (Palette)" colourName=aaa /> <<resetPalette>>

```
<$macrocall $name="colour-picker-resolved" palette="EditColourWidget (Palette)" colourName=bbb />
```

<$macrocall $name="colour-picker-resolved" palette="EditColourWidget (Palette)" colourName=bbb /> <<resetPalette>>

```
<$macrocall $name="colour-picker-resolved" palette="EditColourWidget (Palette)" colourName=ccc />
```

<$macrocall $name="colour-picker-resolved" palette="EditColourWidget (Palette)" colourName=ccc /> <<resetPalette>>

! Custom Colour Picker

This is an example, how we can create a colour picker, that is able to resolve the `<<colour xx>>` macro used in ~TiddlyWiki colour palettes. See: [[$:/core/macros/colour-picker-resolved]]

{{$:/core/macros/colour-picker-resolved}}