created: 20200908152739520
modified: 20211012173918937
tags: Reference docs
title: Custom Markup Definition
type: text/vnd.tiddlywiki

\custom angle="§" _element="div" _classes=".hard-linebreaks" _debug=both

\custom angle="example" _element="div" _classes=".hl" _endString="---" _mode=block _debug=pragmaOnly

! Pragma Example

»example ---

!! Pragma Schema

```
\custom <Glyph>="userSymbol"
        _element="element"
        _classes="class definitions"
        _endString="string"
        _mode="mode"
        _use="userSymbol reference"
        _useGlobal="userSymbol reference"
        _srcName="source parameter"
        _params="""name1=value1 name2="value2 with spaces" """
        _debug="debug options"
```

; Important:
: All pragma parameters are prefixed with an ''underscore `_`'' character. This way we avoid naming conflicts with the TW core. TW core uses a `$` prefix for special parameters for some widgets. 

: If parameters are not listed here they will be sent 1:1 to widgets as "default" parameters. eg: The `open` parameter in [[test-details-open]]

---

; Glyph
: Block: `tick (´), single (›), degree (°), angle (»), approx (≈), pilcrow (¶)`
: Inline: `braille ⠒ ⠶`, `corner ❮ ❯`, `slash /° °/`


; userSymbol
: Can be any single character or word that identifies your "symbol". The first pragma uses "example". The pragma below uses "§". So it depends on you, the user. 

; _element 
: Can be any HTML element, that allows "content". Or as seen later it can also be a widget. In later examples we will use ''$list'' for the list-widget. See: [[Customized Wikitext Lists]]

; _classes = class definitions
: Can be a string with a "connected" list of CSS class definitions, as shown below. ".hard-linebreaks"

; _endString
: Can be used to define a custom "end string" eg: `--xx--`.<br/>By default:<br/>`tick (´), single (›), degree (°)` use `\n` and<br/>`angle (»), approx (≈), pilcrow (¶)` use `\n\n`

; _mode
: Can be ''block'' or ''inline''. Inline is the default value, if the parameter is missing.

; _srcName
: If a `_element=$widget` The source content will be an attribute named: `src` by default. If a different name should be used, it needs to be defined here. See: [[test-checkbox-widget]]. This is handy, using the $macrocall widget.

; _use = userSymbol reference
: Can be a "symbol" name from a pragma that is already defined, or from imported pragmas. See: See [[Import and Re-define a Pragma]]

; _useGlobal = userSymbol reference
: Can be a "symbol" name from a globally defined pragma. See: [[Global Pragma Definitions]]

; _params
: Can be used similar to the _classes definition eg: `_params=":::param1Text:::param2Text"` so it's possible to use those parameters without writing them. If:<br><br>
:* `name1=param1` is defined, it maps to the variable named: `name1`
:* `name1 name2=param2` ... `name1` is the first parameter, but it doesn't have a default value. 

:''The order of the prameters matters''

: If `_params="name1=a1"` is defined but `°:"otherText"` is used, `_params` will be overruled!
:<br>
: ''Important'': 
:* No spaces are allowed, between classes and params
:* `°.a.b:"c c":"d d"` _classes have to be used before _params. Mixing is ''not possible!''
:* Example: [[test-_new_-params-with-spaces]]

; _debug options
: `pragma, pragmaOnly, text, textOnly, both`
: See: [[Pragma Debug Options]]

!! Pragma, Usage and Rendered

»§ My text comes here.
`angle` default end is `\n\n`. 
The `_classes=".hard-linebreaks"` 
allows us to see exactly that ;)
