created: 20200908152739520
modified: 20210318175019140
tags: Reference docs
title: Custom Markup Definition
type: text/vnd.tiddlywiki

\customize angle="§" _element="div" _classes=".hard-linebreaks" _debug=both

\customize angle="example" _element="div" _classes=".hl" _endString="---" _mode=block _debug=pragmaOnly

! Pragma Example

»example ---

!! Pragma Schema

```
\customize <Glyph>="userSymbol"
           _element="element"
           _classes="class definitions"
           _endString="string"
           _mode="mode"
           _use="userSymbol reference"
           _srcName="source parameter"
           _1="name of parameter 1"
           _2="name of parameter 2"
           _params=":::param 1 Text:::param 2 Text"
           _debug="debug options"
```
; Glyph
: Block: `tick (´), single (›), degree (°), angle (»), approx (≈), pilcrow (¶)`
: Inline: `braille ⠒ ⠶`, `corner 『 』`, `slash /° °/`


; userSymbol
: Can be any single character or word that identifies your "symbol". The first pragma uses "example". The pragma below uses "§". So it depends on you, the user. 

; _element 
: Can be any HTML element, that allows "content". Or as seen later it can also be a widget. In later examples we will use ''$list'' for the list-widget. See: [[Customized Wikitext Lists]]

; _classes = class definitions
: Can be a string with a "connected" list of CSS class definitions, as shown below. ".hard-linebreaks"

; _mode
: Can be ''block'' or ''inline''. inline is the default value, if the parameter is missing.

; _srcName
: If a `_element=$widget` The source content will be an attribute named: `src` by default. If a different name should be used, it needs to be defined here. See: [[test-checkbox-widget]]. This is handy, using the $macrocall widget.

; _use = userSymbol reference
: Can be a "symbol" name from a pragma that is already defined, or from imported pragmas. See: See [[Import and Re-define a Pragma]]

; _1, _2
: Can be used, to define parameter names, that should be maped to "parameter aliases". Usage see: [[test-checkbox-widget-params-variable]]

; _params
: Can be used similar to the _classes definition eg: `_params=":::param1Text:::param2Text"` so it's possible to use those parameters without writing them. If:<br><br>
:* `:::param1` is defined, it maps to `_1`
:* `::::::param2` maps to `_2` and 
:*`:::p1:::p2` .. `p1` maps to `_1` and `p2` maps to `_2`<br><br>
: If `_params=":::a1"` is defined but `°:"otherText"` is used, `_params` will be overruled!
:<br>
: ''Important'': 
:* No spaces are allowed, between classes and params
:* `°.a.b:"c c":"d d"` _classes have to be used before _params. Mixing is ''not possible!''
:* Example: [[test-params-with-spaces]]

; _debug options
: `pragma, pragmaOnly, text, textOnly, both`
: See: [[Pragma Debug Options]]

!! Pragma, Usage and Rendered

»§ My text comes here.
`angle` default end is `\n\n`. 
The `_classes=".hard-linebreaks"` 
allows us to see exactly that ;)
