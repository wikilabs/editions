trail: aa bb cc dd ee
created: 20230408131424728
modified: 20230713083111113
tags: 
title: Trails Navigation
type: text/vnd.tiddlywiki

!! Introduction

At the moment the trail macros are only available for the TiddlyWiki documentation branch.

[[trail]] are used as a navigational aid in user interfaces and on web pages. It allows users to keep track and maintain awareness of their locations within programs, documents, or websites.

There are 4 documentation `<<trail ...>>` calls, which are designed for different usecaseses.

|`trail` |A wrapper macro that calls "-Story" (default) "-Simple" or "-Field", depending on the <<.param mode>> parameter |
|`trailStory` |By default, this recursive macro uses the ''tags'' field to create the trail structure. Opening the links recreates this structure in the story-list as close as possible |
|`trailSimple` |This recursive macro also uses the ''tags'' field to define the trail structure. Opening linked tiddlers uses the wiki default settings  |
|`trailField` |By default this macro uses the ''list'' field to create the structure. This macro is ''not recursive''. Opening the links recreates this structure in the story-list as close as possible  |

!! Mode Parameter

With the <<.param mode>> parameter, the `<<trail mode:"story">>` macro is used to switch between "story", "simple" and "field" mode. The `trail` macro is a "wrapper", to allow switching mode using global settings. It is the only macro with the <<.param mode>> parameter. 

|<<.param mode>> |Defaults to "story". Allows <<.value story>>, <<.value simple>> or <<.value field>> |

!!! Mode Values

* <<.value story>>: Clicking on a link will open the new tiddler according to the position within the trail hierarchy. So the hierarchy is reflected by the position in the story-river

* <<.value simple>>: Clicking on a link will open the new tiddler according to the [[Navigation from within the story river|$:/config/Navigation/openLinkFromInsideRiver]] setting, which currently is set to: ''{{$:/config/Navigation/openLinkFromInsideRiver}}''

* <<.value field>>: Clicking on a link will try to recreate the trail order in the story river. Also see: "trailField" section

!! Common Parameters

The ''stop'' parameter ''is required''. All other parameters are optional. If the <<.param start>> parameter is omitted, the <<.var currentTiddler>> will be used

All trail have the following parameters in common:

|<<.param stop>> (required)|Tiddler title to stop recursion -- Needs to be an existing tiddler, otherwise there is an error message |
|<<.param field>> |Defaults to <<.value tags>>. A "tag-like" field used to create the trail hierarchy |
|<<.param start>> |Tiddler title to start with. defaults to <<.var currentTiddler>> |
|<<.param exclude>> |[[Title List]] or a <<.olink subfilter>> list of titles to be excluded. eg: `title [[title with spaces]]`. The <<.param exclude>> parameter can be used to modify the "path" the recursion will take. It only makes sense, if tiddlers have 2 or more tags. Also see: <<.param sort>> |
|<<.param label>> |Label to be shown in front of the trail nav |
|<<.param sort>> |Defaults to <<.value yes>>. The recursion function will sort the <<.param field>> values before evaluating which tiddler is the next parent. This keeps the "order" in line with the tiddler tags, if a tiddler has more than 1 tag. This makes the breadcrumb hierarchy path predictable. Use the <<.param exclude>> parameter, to change the trail hierarchy path. This setting is for advanced users only. If set to <<.value no>> your trail path may change if tiddlers are edited |

!! Usecase trailField Macro

With the `trailField` macro, the <<.value field>> <<.param mode>> can be used to create trail defined in a "list-like" field. Eg. this macro is used in the [[Filter Operators]] tiddler. 

|<<.param stop>> (ignored) |Is ignored |
|<<.param start>> |The value of the <<.param start>> parameter is used to define the tiddler, where the list-values are read from. Defaults to <<.var currentTiddler>> |
|<<.param field>> |Defaults to <<.value list>>. A "list-like" field used to create the trail hierarchy |
|...<small>others</small> |see Common Parameters |


!! trail CSS Options

If the user changes the global font-size and / or line-height in the theme to higher values, it will be needed to adjust the breadcrumb settings accordingly. The following parameters can be used to dynamically calculate the "arrow shape". For small screens the graphical arrow shape is replaced by plain text.

* $:/config/wl/trail/height ... Defines the line-height used for the trail arrow elements. Defaults to: 22
* $:/config/wl/trail/paddingBottom ... Can be used to increase the bottom padding of the arrows. Defaults to: 3
* $:/config/wl/trail/paddingTop ... Can be used to change the top padding of the arrows. Defaults to: 3
* $:/config/wl/trail/showArrows ... If set to "yes" the trail "arrows" are shown. Any other value shows the "plain text" version, independent of the screen width. Defaults to: yes

!! Global Mode Setting

* $:/config/wl/trail/filterMode ... defines the default "mode" the trail macro uses for the "filter syntax" related documentation 

!! Examples

The trail navigation elements are responsive. So for small screens, they will look different according to the [[trail CSS|$:/editions/tw5.com/trail-css]] settings

!!! Story Mode

The story river should reflect the hierarchy as close as possible. 

<$macrocall $name='wikitext-example-without-html'
src="""<$macrocall $name="trail" stop="Filters" mode="story" start="Filter Step"/>
"""/>

!!! Simple Mode

Navigation respects the global setting. 

<$macrocall $name='wikitext-example-without-html'
src="""<$macrocall $name="trail" stop="Filters" mode="simple" start="Filter Step"/>
"""/>

!!! Field Mode

The story river should reflect the hierarchy as close as possible. It uses the list-field in the start-tiddler.

<$macrocall $name='wikitext-example-without-html'
src="""<$macrocall $name="trail" mode="field" field="trail" />
"""/>